// github.com/lonmouth/alien_wave/client/internal/application/detector.go
package application // –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π —Å–ª–æ–π
import (
	"context"
	"log"
	"sync"
	"time"

	"github.com/lonmouth/alien_wave/client/internal/domain"
	transmitter "github.com/lonmouth/alien_wave/client/proto"
)

// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –¥–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π
type Detector struct {
	repo         domain.AnomalyRepository // —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
	stats        *domain.RunningStats     // –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
	checker      *domain.AnomalyChecker   // –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç—å
	trainingMode bool                     // —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
	trainSize    uint                     // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
	logInterval  uint
	currentUUID  string        // —Ç–µ–∫—É—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
	mu           sync.Mutex    // –º—å—é—Ç–µ–∫—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º, —Ç–∞–∫–∏–º –∫–∞–∫ stats –∏ currentUUID, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–Ω–∫–∏
	shutdownCh   chan struct{} // –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
}

func NewDetector(
	repo domain.AnomalyRepository,
	k float64,
	trainSize uint,
	logInterval uint,
) *Detector {
	return &Detector{
		repo:        repo,
		stats:       domain.NewRunningStats(),
		checker:     domain.NewAnomalyChecker(k),
		trainSize:   trainSize,
		logInterval: logInterval,
		shutdownCh:  make(chan struct{}), // —Å–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª shutdownCh –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
	}
}

// –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É shutdown
func (d *Detector) ShutdownChannel() <-chan struct{} {
	return d.shutdownCh
}

// –º–µ—Ç–æ–¥ Shutdown –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ä–∞–±–æ—Ç—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
func (d *Detector) Shutdown(ctx context.Context) error {
	select {
	case <-d.shutdownCh:  // –µ—Å–ª–∏ –∫–∞–Ω–∞–ª shutdownCh –∑–∞–∫—Ä—ã—Ç
		return nil          // –∑–Ω–∞—á–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É–∂–µ –±—ã–ª–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ
	case <-ctx.Done():    // –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç ctx –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω
		return ctx.Err()    // –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –æ—Ç–º–µ–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (ctx.Err())
	default:
		close(d.shutdownCh) // –º–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª shutdownCh, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
		return nil
	}
}

func (d *Detector) saveAnomaly(point *transmitter.Transmission) {
	anomaly := domain.Anomaly{ // —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Anomaly —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		SessionID:    point.SessionId,
		Frequency:    point.Frequency,
		Timestamp:    time.Unix(point.TimestampUtc, 0),
		ExpectedMean: d.stats.Mean(),
		ExpectedSTD:  d.stats.STD(),
		K:            d.checker.K,
	}

	if err := d.repo.Save(anomaly); err != nil {
		log.Printf("Failed to save anomaly: %v", err)
	}
}

func (d *Detector) reset() {
	d.stats = domain.NewRunningStats()
	d.trainingMode = true
}

func (d *Detector) Process(point *transmitter.Transmission) { // –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
	log.Printf("üì• Received data | Session: %s | Freq: %.2f", 
        point.SessionId, point.Frequency)

	if d.currentUUID != point.SessionId {
		d.reset()                       // —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		d.currentUUID = point.SessionId // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π currentUUID
	}

	if d.trainingMode {
		d.stats.Update(point.Frequency)     // –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		if d.stats.Count() >= d.trainSize { // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –æ–±—É—á–µ–Ω–∏–µ
			d.trainingMode = false
			log.Printf("Training completed. Œº=%.2f, œÉ=%.2f", d.stats.Mean(), d.stats.STD())
		}
	}

	if d.checker.IsAnomaly(point.Frequency, d.stats) { // —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª—å–Ω–æ–π
		d.saveAnomaly(point)
	}
// 	if d.checker.IsAnomaly(point.Frequency, d.stats) || d.stats.Count()%50 == 0 {
// 		anomaly := domain.Anomaly{
// 				SessionID:    "TEST-ANOMALY",
// 				Frequency:    100.0,
// 				Timestamp:    time.Now(),
// 				ExpectedMean: d.stats.Mean(),
// 				ExpectedSTD:  d.stats.STD(),
// 				K:            d.checker.K,
// 		}
// 		d.repo.Save(anomaly)
// }

	if d.stats.Count()%10 == 0 { // –ª–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
		log.Printf("Processed: %d, Œº=%.2f, œÉ=%.2f", d.stats.Count(), d.stats.Mean(), d.stats.STD())
	}
}
